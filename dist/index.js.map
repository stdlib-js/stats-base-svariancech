{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/svariancech.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859\u201366. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242\u201347. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = svariancech( 4, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction svariancech( N, correction, x, strideX, offsetX ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\n\t// Use an estimate for the mean:\n\tmu = x[ ix ];\n\tix += strideX;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 1; i < N; i++ ) {\n\t\td = float64ToFloat32( x[ ix ] - mu );\n\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( d*d ) );\n\t\tM = float64ToFloat32( M + d );\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(M2/n) - float64ToFloat32( float64ToFloat32(M/N)*float64ToFloat32(M/n) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = svariancech;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859\u201366. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242\u201347. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = svariancech( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction svariancech( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = svariancech;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar svariancech = require( './svariancech.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( svariancech, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = svariancech;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a single-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* @module @stdlib/stats-base-svariancech\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var svariancech = require( '@stdlib/stats-base-svariancech' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = svariancech( x.length, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var svariancech = require( '@stdlib/stats-base-svariancech' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = svariancech.ndarray( 4, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar svariancech;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsvariancech = main;\n} else {\n\tsvariancech = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = svariancech;\n\n// exports: { \"ndarray\": \"svariancech.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkCzE,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,EAASC,EAAU,CAC1D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIV,EAAIC,EACHD,GAAK,GAAKU,GAAK,EACnB,MAAO,KAER,GAAKV,IAAM,GAAKG,IAAY,EAC3B,MAAO,GAWR,IATAG,EAAKF,EAGLC,EAAKH,EAAGI,CAAG,EACXA,GAAMH,EAGNI,EAAK,EACLC,EAAI,EACEG,EAAI,EAAGA,EAAIX,EAAGW,IACnBF,EAAIX,EAAkBI,EAAGI,CAAG,EAAID,CAAG,EACnCE,EAAKT,EAAkBS,EAAKT,EAAkBW,EAAEA,CAAE,CAAE,EACpDD,EAAIV,EAAkBU,EAAIC,CAAE,EAC5BH,GAAMH,EAEP,OAAOL,EAAkBA,EAAiBS,EAAGG,CAAC,EAAIZ,EAAkBA,EAAiBU,EAAER,CAAC,EAAEF,EAAiBU,EAAEE,CAAC,CAAE,CAAE,CACnH,CAKAb,EAAO,QAAUE,IC7FjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAiCd,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,EAAU,CACjD,OAAOL,EAASE,EAAGC,EAAYC,EAAGC,EAASN,EAAeG,EAAGG,CAAQ,CAAE,CACxE,CAKAP,EAAO,QAAUG,IC/DjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAc,IACdC,EAAU,IAKdF,EAAaC,EAAa,UAAWC,CAAQ,EAK7CH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAcD,EAEdC,EAAcC,EAMf,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "float64ToFloat32", "svariancech", "N", "correction", "x", "strideX", "offsetX", "mu", "ix", "M2", "M", "d", "n", "i", "require_svariancech", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "svariancech", "N", "correction", "x", "strideX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "svariancech", "ndarray", "join", "tryRequire", "isError", "main", "svariancech", "tmp"]
}
